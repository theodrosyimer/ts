{
  "include": [
    "**/*",
    "**/.*"
  ],
  "exclude": [
    "dist",
    "lib",
    "build",
    "node_modules"
  ],
  "compilerOptions": {
    /* Visit https://aka.ms/tsconfig.json to read more about this file */
    "target": "ESNext", /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */
    "lib": [
      "DOM",
      "DOM.Iterable",
      "ESNext"
    ], /* Specify a set of bundled library declaration files that describe the target runtime environment. */
    "jsx": "preserve", /* Specify what JSX code is generated. */
    "useDefineForClassFields": true, /* Emit ECMAScript-standard-compliant class fields. */
    "module": "NodeNext", /* Specify what module code is generated. */
    // "rootDir": "src", /* Specify the root folder within your source files. */
    "moduleResolution": "NodeNext", /* Specify how TypeScript looks up a file from a given module specifier. */
    "resolveJsonModule": true, /* Enable importing .json files */
    /* Emit */
    "declaration": true, /* Generate .d.ts files from TypeScript and JavaScript files in your project. */
    "declarationMap": true, /* Create sourcemaps for d.ts files. */
    "sourceMap": true, /* Create source map files for emitted JavaScript files. */
    "outDir": "dist", /* Specify an output folder for all emitted files. */
    // "removeComments": true,                           /* Disable emitting comments. */
    "noEmit": true, /* Disable emitting files from a compilation. */
    "isolatedModules": true, /* Ensure that each file can be safely transpiled without relying on other imports. */
    "allowSyntheticDefaultImports": true, /* Allow 'import x from y' when a module doesn't have a default export. */
    "esModuleInterop": true, /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables `allowSyntheticDefaultImports` for type compatibility. */
    "forceConsistentCasingInFileNames": true, /* Ensure that casing is correct in imports. */
    "strict": true, /* Enable all strict type-checking options. */
    "noImplicitAny": true, /* Enable error reporting for expressions and declarations with an implied `any` type.. */
    "noImplicitThis": true, /* Enable error reporting when `this` is given the type `any`. */
    "useUnknownInCatchVariables": true, /* Type catch clause variables as 'unknown' instead of 'any'. */
    "alwaysStrict": true, /* Ensure 'use strict' is always emitted. */
    "noUnusedLocals": false, /* Enable error reporting when a local variables aren't read. */
    "noUnusedParameters": false, /* Raise an error when a function parameter isn't read */
    "exactOptionalPropertyTypes": true, /* Interpret optional property types as written, rather than adding 'undefined'. */
    "noImplicitReturns": true, /* Enable error reporting for codepaths that do not explicitly return in a function. */
    "noFallthroughCasesInSwitch": true, /* Enable error reporting for fallthrough cases in switch statements. */
    "noUncheckedIndexedAccess": true, /* Include 'undefined' in index signature results */
    "noImplicitOverride": true, /* Ensure overriding members in derived classes are marked with an override modifier. */
    "noPropertyAccessFromIndexSignature": true, /* Enforces using indexed accessors for keys declared using an indexed type */
    "allowUnusedLabels": false, /* Disable error reporting for unused labels. */
    "allowUnreachableCode": false, /* Disable error reporting for unreachable code. */
    "skipLibCheck": true /* Skip type checking all .d.ts files. */
  }
}
